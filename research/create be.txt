Sure, here are the general steps to create a backend that recommends a dish based on a list of ingredients from scratch:

Collect a database of dishes and their corresponding ingredients. You can create this database manually, by researching recipes and noting the ingredients used in each dish, or you can use an API that provides recipe data such as Spoonacular or Edamam.

Create a database table that stores the dish name and its corresponding ingredients. If you are using a database system like MySQL or PostgreSQL, you can create a table with columns for dish name and ingredients.

Create a backend API that receives a list of ingredients from the client, queries the database for dishes that contain those ingredients, and returns a list of recommended dishes. You can use a web framework like Flask or Django to create the API, and you can use SQL to query the database.

Develop a recommendation algorithm that returns the most relevant dishes based on the list of ingredients. For example, you could prioritize dishes that contain a larger number of the listed ingredients or dishes that have a higher number of matching ingredients compared to the total number of ingredients.

Implement the recommendation algorithm in the backend API. This could involve writing SQL queries that calculate the relevance score for each dish based on the listed ingredients and returning a sorted list of dishes.

Test the backend API by sending different lists of ingredients and verifying that the recommended dishes make sense. You can also test the performance of the API by sending large lists of ingredients and verifying that the response time is reasonable.

Deploy the backend API to a production environment such as AWS or Heroku so that it can be accessed by clients.

This is a high-level overview of the process of creating a backend that recommends dishes based on a list of ingredients. The specifics of each step will depend on the database system, web framework, and recommendation algorithm you choose to use.